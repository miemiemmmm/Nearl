# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.9", "3.11"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Check the github's hardware system
      run: |
        echo "Check the current working directory" 
        pwd
        ls -la
        ls ~
        echo "Linux kernel version:"
        uname -r
        echo "Check the CPU information"
        lscpu
        echo "Check the GPU information" 
        lspci | grep -i --color 'vga\|3d\|2d'
        echo "Check the memory"
        free -h
        echo "Check the python/pip versions"
        python --version
        pip --version

    - name: Install the micromamba
      run: |
        echo "##############################################"
        echo "########## Install the micromamba ############"
        echo "##############################################"
        bash scripts/install_mamba.sh
        [ -f ./micromamba/bin/micromamba ] && echo "micromamba is installed" || echo "micromamba is not installed"

    - name: Install dependencies
      run: |
        echo "##############################################"
        echo "########## Install dependencies ##############"
        echo "##############################################"
        # Use the new installed conda for the following installation
        if [ -f ./micromamba/bin/micromamba ]; then 
          export PATH="$PWD/micromamba/bin:$PATH"
          export MAMBA_EXE=$PWD/micromamba/bin/micromamba
          export MAMBA_ROOT_PREFIX=$PWD/micromamba
          eval "$(micromamba shell hook --shell bash --root-prefix ${MAMBA_ROOT_PREFIX})"
        else
          echo "micromamba is not installed"
          exit 1
        fi
        envname="testenv"
        bash scripts/create_env_mamba.sh $envname
        micromamba activate $envname
        echo "Check the mamba activation status"
        micromamba list
        python -m pip install --upgrade pip
        python -m pip install pytest

    - name: Build the package
      run: |
        echo "##############################################"
        echo "########## Building the package ##############"
        echo "##############################################"
        # Since environment variables are not passed to the next step, we need to activate the environment again
        if [ -f ./micromamba/bin/micromamba ]; then 
          export PATH="$PWD/micromamba/bin:$PATH"
          export MAMBA_EXE=$PWD/micromamba/bin/micromamba
          export MAMBA_ROOT_PREFIX=$PWD/micromamba
          eval "$(micromamba shell hook --shell bash --root-prefix ${MAMBA_ROOT_PREFIX})"
        else
          echo "micromamba is not installed"
          exit 1
        fi
        envname="testenv"
        micromamba activate $envname
        echo "Check the mamba activation status"
        micromamba list
        bash build_dev.sh $envname

#    import nearl.tests.training_jax as training_jax
#    training_jax.cnn_2d()
#    training_jax.simple_network()
#    training_jax.cnn_3d()